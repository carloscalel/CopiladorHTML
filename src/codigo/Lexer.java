/* The following code was generated by JFlex 1.7.0 */

package codigo;    //importando paquetes
import static codigo.Tokens.*;   //importando clases


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>C:/Users/carlo/OneDrive/Documents/NetBeansProjects/Compilador/src/codigo/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\17\1\3\1\63\1\64\1\64\1\63\22\17\1\5\1\17\1\65"+
    "\1\3\2\17\1\3\3\17\1\6\1\6\1\10\1\7\1\4\1\16"+
    "\12\2\1\15\5\17\1\44\1\34\1\35\1\26\1\25\1\36\1\33"+
    "\1\43\1\30\1\22\2\1\1\32\1\31\1\27\1\24\1\23\1\1"+
    "\1\37\1\42\1\21\1\40\1\66\3\1\1\41\4\17\1\20\1\17"+
    "\1\47\1\1\1\57\1\62\1\60\1\70\1\45\1\11\1\50\1\67"+
    "\1\54\1\51\1\46\1\56\1\52\1\13\1\1\1\61\1\14\1\12"+
    "\1\53\3\1\1\55\1\1\12\17\1\64\44\17\1\0\12\17\1\0"+
    "\4\17\1\0\5\17\27\0\1\17\37\0\1\17\u01ca\0\4\17\14\0"+
    "\16\17\5\0\7\17\1\0\1\17\1\0\21\17\165\0\1\17\2\0"+
    "\2\17\4\0\1\17\1\0\6\17\1\0\1\17\3\0\1\17\1\0"+
    "\1\17\24\0\1\17\123\0\1\17\213\0\1\17\255\0\1\17\46\0"+
    "\2\17\1\0\7\17\47\0\11\17\55\0\1\17\1\0\1\17\2\0"+
    "\1\17\2\0\1\17\1\0\10\17\33\0\5\17\3\0\35\17\13\0"+
    "\5\17\112\0\4\17\146\0\1\17\10\0\2\17\12\0\1\17\23\0"+
    "\2\17\1\0\20\17\73\0\2\17\145\0\16\17\66\0\4\17\1\0"+
    "\5\17\56\0\22\17\34\0\104\17\25\0\1\17\10\0\26\17\16\0"+
    "\1\17\201\0\2\17\12\0\1\17\23\0\1\17\10\0\2\17\2\0"+
    "\2\17\26\0\1\17\7\0\1\17\1\0\3\17\4\0\2\17\11\0"+
    "\2\17\2\0\2\17\4\0\10\17\1\0\4\17\2\0\1\17\5\0"+
    "\2\17\14\0\17\17\3\0\1\17\6\0\4\17\2\0\2\17\26\0"+
    "\1\17\7\0\1\17\2\0\1\17\2\0\1\17\2\0\2\17\1\0"+
    "\1\17\5\0\4\17\2\0\2\17\3\0\3\17\1\0\7\17\4\0"+
    "\1\17\1\0\7\17\20\0\13\17\3\0\1\17\11\0\1\17\3\0"+
    "\1\17\26\0\1\17\7\0\1\17\2\0\1\17\5\0\2\17\12\0"+
    "\1\17\3\0\1\17\3\0\2\17\1\0\17\17\4\0\2\17\12\0"+
    "\11\17\1\0\7\17\3\0\1\17\10\0\2\17\2\0\2\17\26\0"+
    "\1\17\7\0\1\17\2\0\1\17\5\0\2\17\11\0\2\17\2\0"+
    "\2\17\3\0\10\17\2\0\4\17\2\0\1\17\5\0\2\17\12\0"+
    "\1\17\1\0\20\17\2\0\1\17\6\0\3\17\3\0\1\17\4\0"+
    "\3\17\2\0\1\17\1\0\1\17\2\0\3\17\2\0\3\17\3\0"+
    "\3\17\14\0\4\17\5\0\3\17\3\0\1\17\4\0\2\17\1\0"+
    "\6\17\1\0\16\17\12\0\20\17\4\0\1\17\10\0\1\17\3\0"+
    "\1\17\27\0\1\17\20\0\3\17\10\0\1\17\3\0\1\17\4\0"+
    "\7\17\2\0\1\17\3\0\5\17\4\0\2\17\12\0\20\17\4\0"+
    "\1\17\10\0\1\17\3\0\1\17\27\0\1\17\12\0\1\17\5\0"+
    "\2\17\11\0\1\17\3\0\1\17\4\0\7\17\2\0\7\17\1\0"+
    "\1\17\4\0\2\17\12\0\1\17\2\0\16\17\3\0\1\17\10\0"+
    "\1\17\3\0\1\17\51\0\2\17\10\0\1\17\3\0\1\17\5\0"+
    "\5\17\4\0\7\17\5\0\2\17\12\0\12\17\6\0\2\17\2\0"+
    "\1\17\22\0\3\17\30\0\1\17\11\0\1\17\1\0\2\17\7\0"+
    "\3\17\1\0\4\17\6\0\1\17\1\0\1\17\10\0\6\17\12\0"+
    "\2\17\2\0\15\17\72\0\5\17\17\0\1\17\12\0\47\17\2\0"+
    "\1\17\1\0\2\17\2\0\1\17\1\0\2\17\1\0\6\17\4\0"+
    "\1\17\7\0\1\17\3\0\1\17\1\0\1\17\1\0\2\17\2\0"+
    "\1\17\15\0\1\17\3\0\2\17\5\0\1\17\1\0\1\17\6\0"+
    "\2\17\12\0\2\17\4\0\40\17\1\0\27\17\2\0\6\17\12\0"+
    "\13\17\1\0\1\17\1\0\1\17\1\0\4\17\12\0\1\17\44\0"+
    "\4\17\24\0\1\17\22\0\1\17\44\0\11\17\1\0\71\17\112\0"+
    "\6\17\116\0\2\17\46\0\1\17\1\0\5\17\1\0\2\17\53\0"+
    "\1\17\u014d\0\1\17\4\0\2\17\7\0\1\17\1\0\1\17\4\0"+
    "\2\17\51\0\1\17\4\0\2\17\41\0\1\17\4\0\2\17\7\0"+
    "\1\17\1\0\1\17\4\0\2\17\17\0\1\17\71\0\1\17\4\0"+
    "\2\17\103\0\2\17\3\0\40\17\20\0\20\17\126\0\2\17\6\0"+
    "\3\17\u026c\0\2\17\21\0\1\17\32\0\5\17\113\0\3\17\13\0"+
    "\7\17\15\0\1\17\7\0\13\17\25\0\13\17\24\0\14\17\15\0"+
    "\1\17\3\0\1\17\2\0\14\17\124\0\3\17\1\0\4\17\2\0"+
    "\2\17\12\0\41\17\3\0\2\17\12\0\6\17\130\0\10\17\53\0"+
    "\5\17\106\0\12\17\37\0\1\17\14\0\4\17\14\0\12\17\50\0"+
    "\2\17\5\0\13\17\54\0\4\17\32\0\6\17\12\0\46\17\34\0"+
    "\4\17\77\0\1\17\35\0\2\17\13\0\6\17\12\0\15\17\1\0"+
    "\10\17\17\0\101\17\114\0\4\17\12\0\21\17\11\0\14\17\164\0"+
    "\14\17\70\0\10\17\12\0\3\17\61\0\2\17\11\0\107\17\3\0"+
    "\1\17\43\0\1\17\2\0\6\17\366\0\5\17\u011b\0\2\17\6\0"+
    "\2\17\46\0\2\17\6\0\2\17\10\0\1\17\1\0\1\17\1\0"+
    "\1\17\1\0\1\17\37\0\2\17\65\0\1\17\7\0\1\17\1\0"+
    "\3\17\3\0\1\17\7\0\3\17\4\0\2\17\6\0\4\17\15\0"+
    "\5\17\3\0\1\17\7\0\53\17\1\64\1\64\25\17\2\0\23\17"+
    "\1\0\34\17\1\0\15\17\1\0\20\17\15\0\63\17\41\0\21\17"+
    "\1\0\4\17\1\0\2\17\12\0\1\17\1\0\3\17\5\0\6\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\4\0\1\17\13\0\2\17"+
    "\4\0\5\17\5\0\4\17\1\0\21\17\51\0\u032d\17\64\0\u0716\17"+
    "\57\0\1\17\57\0\1\17\205\0\6\17\11\0\14\17\46\0\1\17"+
    "\1\0\5\17\1\0\2\17\70\0\7\17\1\0\17\17\30\0\11\17"+
    "\7\0\1\17\7\0\1\17\7\0\1\17\7\0\1\17\7\0\1\17"+
    "\7\0\1\17\7\0\1\17\7\0\1\17\40\0\57\17\1\0\u01d5\17"+
    "\3\0\31\17\17\0\1\17\5\0\2\17\5\0\4\17\126\0\2\17"+
    "\2\0\2\17\3\0\1\17\132\0\1\17\4\0\5\17\51\0\3\17"+
    "\136\0\21\17\33\0\65\17\20\0\u0200\17\u19b6\0\112\17\u51d6\0\52\17"+
    "\u048d\0\103\17\56\0\2\17\u010d\0\3\17\34\0\24\17\63\0\1\17"+
    "\12\0\1\17\163\0\45\17\11\0\2\17\147\0\2\17\44\0\1\17"+
    "\10\0\77\17\61\0\30\17\64\0\14\17\106\0\12\17\12\0\6\17"+
    "\30\0\3\17\1\0\1\17\1\0\2\17\56\0\2\17\44\0\14\17"+
    "\35\0\3\17\101\0\16\17\13\0\6\17\37\0\1\17\67\0\11\17"+
    "\16\0\2\17\12\0\6\17\27\0\3\17\111\0\30\17\3\0\2\17"+
    "\20\0\2\17\5\0\12\17\6\0\2\17\6\0\2\17\6\0\11\17"+
    "\7\0\1\17\7\0\1\17\53\0\1\17\12\0\12\17\173\0\1\17"+
    "\2\0\2\17\12\0\6\17\u2ba4\0\14\17\27\0\4\17\61\0\u2104\17"+
    "\u016e\0\2\17\152\0\46\17\7\0\14\17\5\0\5\17\14\0\1\17"+
    "\15\0\1\17\5\0\1\17\1\0\1\17\2\0\1\17\2\0\1\17"+
    "\154\0\41\17\u016b\0\22\17\100\0\2\17\66\0\50\17\14\0\4\17"+
    "\20\0\20\17\20\0\3\17\2\0\30\17\3\0\40\17\5\0\1\17"+
    "\207\0\23\17\12\0\7\17\32\0\4\17\1\0\1\17\32\0\13\17"+
    "\131\0\3\17\6\0\2\17\6\0\2\17\6\0\2\17\3\0\43\17"+
    "\14\0\1\17\32\0\1\17\23\0\1\17\2\0\1\17\17\0\2\17"+
    "\16\0\42\17\173\0\105\17\65\0\210\17\1\0\202\17\35\0\3\17"+
    "\61\0\17\17\1\0\37\17\40\0\20\17\33\0\5\17\53\0\5\17"+
    "\36\0\2\17\44\0\4\17\10\0\1\17\5\0\52\17\236\0\2\17"+
    "\12\0\6\17\44\0\4\17\44\0\4\17\50\0\10\17\64\0\234\17"+
    "\u0137\0\11\17\26\0\12\17\10\0\230\17\6\0\2\17\1\0\1\17"+
    "\54\0\1\17\2\0\3\17\1\0\2\17\27\0\12\17\27\0\11\17"+
    "\37\0\101\17\23\0\1\17\2\0\12\17\26\0\12\17\32\0\106\17"+
    "\70\0\6\17\2\0\100\17\4\0\1\17\2\0\5\17\10\0\1\17"+
    "\3\0\1\17\33\0\4\17\3\0\4\17\1\0\40\17\35\0\3\17"+
    "\35\0\43\17\10\0\1\17\36\0\31\17\66\0\12\17\26\0\12\17"+
    "\23\0\15\17\22\0\156\17\111\0\67\17\63\0\15\17\63\0\u030d\17"+
    "\107\0\37\17\12\0\17\17\74\0\25\17\31\0\7\17\12\0\6\17"+
    "\65\0\1\17\12\0\20\17\44\0\2\17\1\0\11\17\105\0\5\17"+
    "\3\0\3\17\13\0\1\17\1\0\43\17\22\0\1\17\45\0\6\17"+
    "\1\0\101\17\7\0\1\17\1\0\1\17\4\0\1\17\17\0\1\17"+
    "\12\0\7\17\73\0\5\17\12\0\6\17\4\0\1\17\10\0\2\17"+
    "\2\0\2\17\26\0\1\17\7\0\1\17\2\0\1\17\5\0\2\17"+
    "\11\0\2\17\2\0\2\17\3\0\2\17\1\0\6\17\1\0\5\17"+
    "\7\0\2\17\7\0\3\17\5\0\213\17\113\0\5\17\12\0\46\17"+
    "\106\0\1\17\1\0\10\17\12\0\246\17\66\0\2\17\11\0\27\17"+
    "\6\0\42\17\101\0\3\17\1\0\13\17\12\0\46\17\70\0\10\17"+
    "\12\0\66\17\32\0\3\17\17\0\4\17\12\0\u0166\17\112\0\25\17"+
    "\1\0\u01c0\17\71\0\u0107\17\11\0\1\17\55\0\1\17\11\0\17\17"+
    "\12\0\30\17\36\0\2\17\26\0\1\17\16\0\u0349\17\u039a\0\146\17"+
    "\157\0\21\17\304\0\u0abc\17\u042f\0\u0fd1\17\u0247\0\u21b9\17\u0239\0\7\17"+
    "\37\0\1\17\12\0\146\17\36\0\2\17\5\0\13\17\67\0\11\17"+
    "\4\0\14\17\12\0\11\17\25\0\5\17\23\0\u0370\17\105\0\13\17"+
    "\57\0\20\17\21\0\100\17\1\0\37\17\u17ed\0\23\17\u02f3\0\u250d\17"+
    "\2\0\u0bfe\17\153\0\5\17\15\0\3\17\11\0\7\17\12\0\3\17"+
    "\2\0\u14c6\17\5\0\3\17\6\0\10\17\10\0\2\17\7\0\36\17"+
    "\4\0\224\17\3\0\u01bb\17\125\0\1\17\107\0\1\17\2\0\2\17"+
    "\1\0\2\17\2\0\2\17\4\0\1\17\14\0\1\17\1\0\1\17"+
    "\7\0\1\17\101\0\1\17\4\0\2\17\10\0\1\17\7\0\1\17"+
    "\34\0\1\17\4\0\1\17\5\0\1\17\1\0\3\17\7\0\1\17"+
    "\u0154\0\2\17\31\0\1\17\31\0\1\17\37\0\1\17\31\0\1\17"+
    "\37\0\1\17\31\0\1\17\37\0\1\17\31\0\1\17\37\0\1\17"+
    "\31\0\1\17\10\0\2\17\62\0\u0200\17\67\0\4\17\62\0\10\17"+
    "\1\0\16\17\1\0\26\17\5\0\1\17\17\0\u0550\17\7\0\1\17"+
    "\21\0\2\17\7\0\1\17\2\0\1\17\5\0\u07d5\17\305\0\13\17"+
    "\7\0\51\17\113\0\5\17\12\0\u04a6\17\4\0\1\17\33\0\1\17"+
    "\2\0\1\17\1\0\2\17\1\0\1\17\12\0\1\17\4\0\1\17"+
    "\1\0\1\17\1\0\6\17\1\0\4\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\3\0\1\17\2\0\1\17\1\0\2\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17\2\0\1\17"+
    "\1\0\2\17\4\0\1\17\7\0\1\17\4\0\1\17\4\0\1\17"+
    "\1\0\1\17\12\0\1\17\21\0\5\17\3\0\1\17\5\0\1\17"+
    "\21\0\u0274\17\32\0\6\17\32\0\6\17\32\0\u0e76\17\ua6d7\0\51\17"+
    "\u1035\0\13\17\336\0\2\17\u1682\0\u295e\17\u021e\0\uffff\17\uffff\17\uffff\17\uffff\17\uffff\17\uffff\17\uffff\17\uffff\17\uffff\17\uffff\17\uffff\17\u06ed\17"+
    "\360\0\uffff\17\uffff\17\ufe12\17";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\2\1\4\2\1\1"+
    "\2\0\3\2\3\0\4\2\11\0\3\2\1\5\1\0"+
    "\1\3\4\2\11\0\5\2\13\0\3\2\12\0\1\2"+
    "\27\0\1\6\4\0\1\7\1\0\1\10\45\0\1\11"+
    "\10\0\1\12\1\0\1\13\7\0\1\14\10\0\1\15"+
    "\1\0\1\14\1\0\1\16\3\0\1\17\4\0\1\20"+
    "\2\0\1\21\4\0\1\22\4\0\1\23\1\0\1\23"+
    "\1\24\24\0\1\25\7\0\1\14\3\0\1\26\4\0"+
    "\1\14\2\0\1\27\3\0\1\23";

  private static int [] zzUnpackAction() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\u023a\0\u0273\0\71\0\u02ac\0\u02e5\0\u031e"+
    "\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad\0\u04e6"+
    "\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c\0\u0675\0\u06ae"+
    "\0\u06e7\0\u0720\0\u0759\0\u0792\0\u07cb\0\u0804\0\u0402\0\u083d"+
    "\0\u0876\0\u08af\0\u08e8\0\u0921\0\u095a\0\u0993\0\u09cc\0\u0a05"+
    "\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd"+
    "\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c\0\u0d95"+
    "\0\u0dce\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d"+
    "\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\u107a\0\u10b3\0\u10ec\0\u1125"+
    "\0\u115e\0\u1197\0\u11d0\0\u1209\0\u1242\0\u127b\0\u12b4\0\u12ed"+
    "\0\u1326\0\u135f\0\u1398\0\u13d1\0\u140a\0\u1443\0\u147c\0\u14b5"+
    "\0\u14ee\0\u1527\0\u1560\0\u1599\0\u15d2\0\u160b\0\u1644\0\u167d"+
    "\0\u16b6\0\u011d\0\u16ef\0\u1728\0\u1761\0\u179a\0\u011d\0\u17d3"+
    "\0\71\0\u180c\0\u1845\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962"+
    "\0\u199b\0\u19d4\0\u1a0d\0\u1a46\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a"+
    "\0\u1b63\0\u1b9c\0\u1bd5\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9\0\u1cf2"+
    "\0\u1d2b\0\u1d64\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48\0\u1e81\0\u1eba"+
    "\0\u1ef3\0\u1f2c\0\u1f65\0\u1f9e\0\u1fd7\0\u2010\0\71\0\u2049"+
    "\0\u2082\0\u20bb\0\u20f4\0\u212d\0\u2166\0\u219f\0\u21d8\0\71"+
    "\0\u2211\0\71\0\u224a\0\u2283\0\u22bc\0\u22f5\0\u232e\0\u2367"+
    "\0\u23a0\0\71\0\u23d9\0\u2412\0\u244b\0\u2484\0\u24bd\0\u24f6"+
    "\0\u252f\0\u2568\0\71\0\u25a1\0\u25da\0\u2613\0\71\0\u264c"+
    "\0\u2685\0\u26be\0\u26f7\0\u2730\0\u2769\0\u27a2\0\u27db\0\u25a1"+
    "\0\u2814\0\u284d\0\71\0\u2886\0\u28bf\0\u28f8\0\u2931\0\71"+
    "\0\u296a\0\u29a3\0\u29dc\0\u2a15\0\71\0\u2a4e\0\u2a87\0\71"+
    "\0\u2ac0\0\u2af9\0\u2b32\0\u2b6b\0\u2ba4\0\u2bdd\0\u2c16\0\u2c4f"+
    "\0\u2c88\0\u2cc1\0\u2cfa\0\u2d33\0\u2d6c\0\u2da5\0\u2dde\0\u2e17"+
    "\0\u2e50\0\u2e89\0\u2ec2\0\u2efb\0\71\0\u2f34\0\u2f6d\0\u2fa6"+
    "\0\u2fdf\0\u3018\0\u3051\0\u308a\0\u30c3\0\u30fc\0\u3135\0\u316e"+
    "\0\u308a\0\u31a7\0\u31e0\0\u3219\0\u3252\0\u31a7\0\u328b\0\u32c4"+
    "\0\71\0\u32fd\0\u3336\0\u336f\0\u011d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\5\2\6\1\5"+
    "\4\3\1\6\1\7\1\6\1\2\1\10\1\11\10\3"+
    "\1\12\6\3\1\13\1\3\1\6\16\3\1\5\1\0"+
    "\1\14\3\3\3\15\6\0\4\15\3\0\24\15\1\16"+
    "\16\15\3\0\4\15\1\3\1\17\2\0\1\20\3\0"+
    "\4\3\3\0\1\15\23\3\1\16\16\3\3\0\3\3"+
    "\1\15\1\21\1\4\2\0\1\22\3\23\4\21\1\0"+
    "\1\23\1\0\1\15\23\21\1\16\16\21\3\0\3\21"+
    "\3\0\1\5\1\0\1\5\2\0\1\5\52\0\1\5"+
    "\105\0\1\24\61\0\1\15\1\3\1\17\2\0\1\20"+
    "\3\0\4\3\3\0\1\15\1\3\1\25\21\3\1\16"+
    "\16\3\3\0\3\3\1\15\1\3\1\17\2\0\1\20"+
    "\3\0\4\3\3\0\1\15\6\3\1\26\14\3\1\16"+
    "\16\3\3\0\3\3\1\15\1\3\1\17\2\0\1\20"+
    "\3\0\4\3\3\0\1\15\1\3\1\27\21\3\1\16"+
    "\16\3\3\0\3\3\1\15\1\3\1\17\2\0\1\20"+
    "\3\0\4\3\3\0\1\15\13\3\1\30\7\3\1\16"+
    "\16\3\3\0\3\3\1\0\2\31\2\0\1\31\3\0"+
    "\1\32\3\31\1\0\1\33\2\0\23\31\1\0\16\31"+
    "\3\0\3\31\11\0\1\34\33\0\1\35\1\36\3\0"+
    "\1\37\1\40\1\0\1\41\13\0\1\15\1\21\1\17"+
    "\2\0\1\42\3\0\4\21\3\0\1\15\23\21\1\16"+
    "\16\21\3\0\3\21\1\0\1\43\1\42\2\0\1\20"+
    "\3\0\4\43\4\0\23\43\1\0\16\43\3\0\3\43"+
    "\1\15\1\21\1\15\2\0\1\44\3\0\4\21\3\0"+
    "\1\15\23\21\1\16\16\21\3\0\3\21\1\0\1\44"+
    "\1\45\2\0\1\46\3\0\4\44\4\0\23\44\1\0"+
    "\16\44\3\0\3\44\2\0\1\45\70\0\1\47\66\0"+
    "\1\15\1\3\1\17\2\0\1\20\3\0\4\3\3\0"+
    "\1\15\2\3\1\50\20\3\1\16\16\3\3\0\3\3"+
    "\1\15\1\3\1\17\2\0\1\20\3\0\4\3\3\0"+
    "\1\15\1\3\1\51\21\3\1\16\16\3\3\0\3\3"+
    "\1\15\1\3\1\17\2\0\1\20\3\0\4\3\3\0"+
    "\1\15\6\3\1\52\14\3\1\16\16\3\3\0\3\3"+
    "\1\15\1\3\1\17\2\0\1\20\3\0\4\3\3\0"+
    "\1\15\11\3\1\53\11\3\1\16\16\3\3\0\3\3"+
    "\1\0\2\31\2\0\1\31\3\0\4\31\1\0\1\33"+
    "\2\0\23\31\1\0\16\31\3\0\3\31\1\0\2\31"+
    "\2\0\1\31\3\0\1\31\1\54\2\31\1\0\1\33"+
    "\2\0\23\31\1\0\16\31\3\0\3\31\1\0\2\33"+
    "\1\0\1\55\1\33\3\0\4\33\4\0\23\33\1\0"+
    "\16\33\3\0\3\33\52\0\1\56\64\0\1\57\72\0"+
    "\1\60\73\0\1\61\30\0\1\62\32\0\1\63\71\0"+
    "\1\64\22\0\1\44\1\42\2\0\1\42\3\0\4\44"+
    "\4\0\23\44\1\0\16\44\3\0\3\44\1\0\1\43"+
    "\1\65\2\0\1\43\3\0\4\43\4\0\23\43\1\0"+
    "\16\43\3\0\3\43\1\0\1\44\3\0\1\44\3\0"+
    "\4\44\4\0\23\44\1\0\16\44\3\0\3\44\2\0"+
    "\1\45\2\0\4\23\5\0\1\23\53\0\1\44\3\0"+
    "\1\46\3\0\4\44\4\0\23\44\1\0\16\44\3\0"+
    "\3\44\1\15\1\3\1\17\2\0\1\20\3\0\4\3"+
    "\3\0\1\15\3\3\1\66\17\3\1\16\16\3\3\0"+
    "\3\3\1\15\1\3\1\17\2\0\1\20\3\0\4\3"+
    "\3\0\1\15\5\3\1\67\15\3\1\16\16\3\3\0"+
    "\3\3\1\15\1\3\1\17\2\0\1\20\3\0\4\3"+
    "\3\0\1\15\13\3\1\70\7\3\1\16\16\3\3\0"+
    "\3\3\1\15\1\3\1\17\2\0\1\20\3\0\4\3"+
    "\3\0\1\15\1\71\22\3\1\16\16\3\3\0\3\3"+
    "\1\0\2\31\2\0\1\31\3\0\1\31\1\72\2\31"+
    "\1\0\1\33\2\0\23\31\1\0\16\31\3\0\3\31"+
    "\13\0\1\73\31\0\1\74\21\0\1\75\13\0\1\35"+
    "\125\0\1\76\74\0\1\77\27\0\1\100\125\0\1\101"+
    "\66\0\1\102\34\0\1\103\61\0\1\65\66\0\1\15"+
    "\1\3\1\17\2\0\1\20\3\0\4\3\3\0\1\104"+
    "\23\3\1\16\16\3\3\0\3\3\1\15\1\3\1\17"+
    "\2\0\1\20\3\0\4\3\3\0\1\15\1\3\1\105"+
    "\21\3\1\16\16\3\3\0\3\3\1\15\1\3\1\17"+
    "\2\0\1\20\3\0\4\3\3\0\1\15\11\3\1\106"+
    "\11\3\1\16\16\3\3\0\3\3\1\15\1\3\1\17"+
    "\2\0\1\20\3\0\4\3\3\0\1\15\3\3\1\107"+
    "\17\3\1\16\16\3\3\0\3\3\1\0\2\31\2\0"+
    "\1\31\3\0\2\31\1\110\1\31\1\0\1\33\2\0"+
    "\23\31\1\0\16\31\3\0\3\31\56\0\1\111\62\0"+
    "\1\112\33\0\1\113\125\0\1\114\66\0\1\63\73\0"+
    "\1\115\75\0\1\116\16\0\1\117\136\0\1\120\16\0"+
    "\3\15\6\0\4\15\3\0\5\15\1\121\16\15\1\16"+
    "\16\15\3\0\4\15\1\3\1\17\2\0\1\20\3\0"+
    "\4\3\3\0\1\15\3\3\1\122\17\3\1\16\16\3"+
    "\3\0\3\3\1\15\1\3\1\17\2\0\1\20\3\0"+
    "\4\3\3\0\1\123\23\3\1\16\16\3\3\0\3\3"+
    "\1\15\1\3\1\17\2\0\1\20\3\0\4\3\3\0"+
    "\1\124\23\3\1\16\16\3\3\0\3\3\1\0\2\31"+
    "\2\0\1\31\3\0\3\31\1\125\1\126\1\33\2\0"+
    "\23\31\1\0\16\31\3\0\3\31\45\0\1\127\113\0"+
    "\1\127\45\0\1\127\12\0\1\111\61\0\1\102\71\0"+
    "\1\130\65\0\1\102\73\0\1\131\3\0\1\132\1\133"+
    "\1\134\62\0\1\102\16\0\3\15\6\0\4\15\3\0"+
    "\4\15\1\135\17\15\1\16\16\15\3\0\4\15\1\3"+
    "\1\17\2\0\1\20\3\0\4\3\3\0\1\136\23\3"+
    "\1\16\16\3\3\0\3\3\3\15\6\0\4\15\3\0"+
    "\1\15\1\137\1\15\1\140\2\15\1\141\1\142\1\143"+
    "\1\15\1\144\1\145\2\15\1\146\5\15\1\16\16\15"+
    "\3\0\1\147\5\15\6\0\4\15\3\0\12\15\1\150"+
    "\11\15\1\16\16\15\3\0\3\15\1\0\2\31\2\0"+
    "\1\31\3\0\4\31\1\126\1\33\2\0\23\31\1\0"+
    "\16\31\3\0\3\31\16\0\1\151\137\0\1\152\55\0"+
    "\1\153\77\0\1\154\67\0\1\155\62\0\1\156\32\0"+
    "\1\157\45\0\1\160\6\0\3\15\6\0\4\15\3\0"+
    "\6\15\1\161\15\15\1\16\16\15\3\0\6\15\6\0"+
    "\4\15\3\0\1\15\1\162\1\163\1\140\2\15\1\141"+
    "\1\142\1\143\1\15\1\144\1\145\2\15\1\146\5\15"+
    "\1\16\16\15\3\0\1\164\5\15\6\0\4\15\3\0"+
    "\2\15\1\165\11\15\1\166\7\15\1\16\16\15\3\0"+
    "\6\15\6\0\4\15\3\0\14\15\1\167\7\15\1\16"+
    "\16\15\3\0\6\15\6\0\4\15\3\0\14\15\1\170"+
    "\1\15\1\171\1\15\1\172\3\15\1\16\16\15\3\0"+
    "\6\15\6\0\4\15\3\0\16\15\1\173\5\15\1\16"+
    "\16\15\3\0\6\15\6\0\4\15\3\0\1\15\1\174"+
    "\22\15\1\16\16\15\3\0\6\15\6\0\4\15\3\0"+
    "\2\15\1\175\21\15\1\16\16\15\3\0\6\15\6\0"+
    "\4\15\3\0\2\15\1\176\21\15\1\16\16\15\3\0"+
    "\6\15\6\0\4\15\3\0\7\15\1\177\14\15\1\16"+
    "\16\15\3\0\6\15\6\0\4\15\3\0\2\15\1\200"+
    "\21\15\1\16\16\15\3\0\6\15\6\0\4\15\3\0"+
    "\2\15\1\201\21\15\1\16\16\15\3\0\3\15\16\0"+
    "\1\202\126\0\1\102\61\0\1\157\35\0\1\157\124\0"+
    "\1\157\75\0\1\203\15\0\3\15\6\0\4\15\3\0"+
    "\2\15\1\165\11\15\1\204\7\15\1\16\16\15\3\0"+
    "\6\15\6\0\4\15\3\0\11\15\1\205\12\15\1\16"+
    "\16\15\3\0\6\15\6\0\4\15\3\0\2\15\1\206"+
    "\21\15\1\16\16\15\3\0\6\15\6\0\4\15\3\0"+
    "\1\15\1\207\22\15\1\16\16\15\3\0\6\15\6\0"+
    "\4\15\3\0\15\15\1\210\6\15\1\16\16\15\3\0"+
    "\6\15\6\0\4\15\3\0\17\15\1\211\4\15\1\16"+
    "\16\15\3\0\6\15\6\0\4\15\3\0\15\15\1\212"+
    "\6\15\1\16\16\15\3\0\6\15\6\0\4\15\3\0"+
    "\12\15\1\213\11\15\1\16\16\15\3\0\6\15\6\0"+
    "\4\15\3\0\16\15\1\214\5\15\1\16\16\15\3\0"+
    "\6\15\6\0\4\15\3\0\23\15\1\215\1\16\16\15"+
    "\3\0\6\15\6\0\4\15\3\0\11\15\1\216\12\15"+
    "\1\16\16\15\3\0\6\15\6\0\4\15\3\0\22\15"+
    "\1\217\1\15\1\16\16\15\3\0\6\15\6\0\4\15"+
    "\3\0\12\15\1\220\11\15\1\16\16\15\3\0\6\15"+
    "\6\0\4\15\3\0\6\15\1\221\15\15\1\16\16\15"+
    "\3\0\6\15\6\0\4\15\3\0\7\15\1\222\14\15"+
    "\1\16\16\15\3\0\6\15\6\0\4\15\3\0\7\15"+
    "\1\223\14\15\1\16\16\15\3\0\3\15\1\0\3\202"+
    "\1\224\64\202\63\225\2\0\4\225\3\15\6\0\4\15"+
    "\3\0\15\15\1\226\6\15\1\16\16\15\3\0\6\15"+
    "\6\0\4\15\3\0\23\15\1\227\1\16\16\15\3\0"+
    "\6\15\6\0\4\15\3\0\7\15\1\230\14\15\1\16"+
    "\16\15\3\0\6\15\6\0\4\15\3\0\20\15\1\231"+
    "\3\15\1\16\16\15\3\0\6\15\6\0\4\15\3\0"+
    "\12\15\1\232\11\15\1\16\16\15\3\0\6\15\6\0"+
    "\4\15\3\0\17\15\1\233\4\15\1\16\16\15\3\0"+
    "\6\15\6\0\4\15\3\0\16\15\1\234\5\15\1\16"+
    "\16\15\3\0\6\15\6\0\4\15\3\0\5\15\1\235"+
    "\16\15\1\16\16\15\3\0\6\15\6\0\4\15\3\0"+
    "\17\15\1\236\4\15\1\16\16\15\3\0\6\15\6\0"+
    "\4\15\3\0\17\15\1\237\4\15\1\16\16\15\3\0"+
    "\6\15\6\0\4\15\3\0\12\15\1\240\11\15\1\16"+
    "\16\15\3\0\6\15\6\0\4\15\3\0\1\15\1\241"+
    "\22\15\1\16\16\15\3\0\6\15\6\0\4\15\3\0"+
    "\14\15\1\242\7\15\1\16\16\15\3\0\6\15\6\0"+
    "\4\15\3\0\14\15\1\243\7\15\1\16\16\15\3\0"+
    "\6\15\6\0\4\15\3\0\6\15\1\244\15\15\1\16"+
    "\16\15\3\0\6\15\6\0\4\15\3\0\16\15\1\245"+
    "\5\15\1\16\16\15\3\0\3\15\1\0\1\246\2\202"+
    "\1\224\4\202\4\246\4\202\23\246\1\202\16\246\3\202"+
    "\3\246\45\0\1\155\23\0\3\15\6\0\4\15\3\0"+
    "\12\15\1\247\11\15\1\16\16\15\3\0\6\15\6\0"+
    "\4\15\3\0\6\15\1\250\15\15\1\16\16\15\3\0"+
    "\6\15\6\0\4\15\3\0\12\15\1\251\11\15\1\16"+
    "\16\15\3\0\6\15\6\0\4\15\3\0\14\15\1\252"+
    "\7\15\1\16\16\15\3\0\6\15\6\0\4\15\3\0"+
    "\14\15\1\253\7\15\1\16\16\15\3\0\6\15\6\0"+
    "\4\15\3\0\6\15\1\254\15\15\1\16\16\15\3\0"+
    "\6\15\6\0\4\15\3\0\14\15\1\255\7\15\1\16"+
    "\16\15\3\0\6\15\6\0\4\15\3\0\3\15\1\256"+
    "\20\15\1\16\16\15\3\0\6\15\6\0\4\15\3\0"+
    "\2\15\1\257\21\15\1\16\16\15\3\0\6\15\6\0"+
    "\4\15\3\0\14\15\1\260\7\15\1\16\16\15\3\0"+
    "\6\15\6\0\4\15\3\0\15\15\1\261\6\15\1\16"+
    "\16\15\3\0\6\15\6\0\4\15\3\0\20\15\1\262"+
    "\3\15\1\16\16\15\3\0\6\15\6\0\4\15\3\0"+
    "\14\15\1\263\7\15\1\16\16\15\3\0\3\15\1\0"+
    "\1\246\2\202\1\224\4\202\4\246\1\202\1\264\2\202"+
    "\23\246\1\202\16\246\3\202\3\246\3\15\6\0\4\15"+
    "\3\0\14\15\1\265\7\15\1\16\16\15\3\0\6\15"+
    "\6\0\4\15\3\0\20\15\1\266\3\15\1\16\16\15"+
    "\3\0\6\15\6\0\4\15\3\0\4\15\1\267\17\15"+
    "\1\16\16\15\3\0\6\15\6\0\4\15\3\0\13\15"+
    "\1\270\10\15\1\16\16\15\3\0\6\15\6\0\4\15"+
    "\3\0\16\15\1\271\5\15\1\16\16\15\3\0\6\15"+
    "\6\0\4\15\3\0\1\272\23\15\1\16\16\15\3\0"+
    "\6\15\6\0\4\15\3\0\4\15\1\273\17\15\1\16"+
    "\16\15\3\0\6\15\6\0\4\15\3\0\1\15\1\274"+
    "\22\15\1\16\16\15\3\0\6\15\6\0\4\15\3\0"+
    "\1\275\23\15\1\16\16\15\3\0\6\15\6\0\4\15"+
    "\3\0\16\15\1\276\5\15\1\16\16\15\3\0\6\15"+
    "\6\0\4\15\3\0\12\15\1\277\11\15\1\16\16\15"+
    "\3\0\3\15\1\0\64\264\1\300\3\264\3\15\2\0"+
    "\1\301\3\0\4\15\3\0\24\15\1\16\16\15\3\0"+
    "\6\15\6\0\4\15\3\0\12\15\1\302\11\15\1\16"+
    "\16\15\3\0\6\15\6\0\4\15\3\0\4\15\1\303"+
    "\17\15\1\16\16\15\3\0\6\15\6\0\4\15\3\0"+
    "\17\15\1\304\4\15\1\16\16\15\3\0\6\15\6\0"+
    "\4\15\3\0\5\15\1\305\10\15\1\306\5\15\1\16"+
    "\16\15\3\0\6\15\6\0\4\15\3\0\1\307\23\15"+
    "\1\16\16\15\3\0\6\15\6\0\4\15\3\0\14\15"+
    "\1\310\7\15\1\16\16\15\3\0\6\15\6\0\4\15"+
    "\3\0\2\15\1\311\1\15\1\312\1\313\16\15\1\16"+
    "\16\15\3\0\6\15\6\0\4\15\3\0\21\15\1\314"+
    "\2\15\1\16\16\15\3\0\6\15\6\0\4\15\3\0"+
    "\4\15\1\315\17\15\1\16\16\15\3\0\3\15\35\0"+
    "\1\316\33\0\3\15\6\0\4\15\3\0\4\15\1\317"+
    "\17\15\1\16\16\15\3\0\6\15\6\0\4\15\3\0"+
    "\14\15\1\320\7\15\1\16\16\15\3\0\6\15\6\0"+
    "\4\15\3\0\14\15\1\321\7\15\1\16\16\15\3\0"+
    "\6\15\6\0\4\15\3\0\7\15\1\322\14\15\1\16"+
    "\16\15\3\0\6\15\6\0\4\15\3\0\1\15\1\323"+
    "\22\15\1\16\16\15\3\0\6\15\6\0\4\15\3\0"+
    "\1\15\1\324\22\15\1\16\16\15\3\0\6\15\6\0"+
    "\4\15\3\0\17\15\1\325\4\15\1\16\16\15\3\0"+
    "\6\15\6\0\4\15\3\0\16\15\1\326\5\15\1\16"+
    "\16\15\3\0\6\15\6\0\4\15\3\0\14\15\1\327"+
    "\7\15\1\16\16\15\3\0\3\15\24\0\1\330\44\0"+
    "\3\15\2\0\1\331\3\0\4\15\3\0\24\15\1\16"+
    "\16\15\3\0\6\15\6\0\4\15\3\0\1\15\1\332"+
    "\22\15\1\16\16\15\3\0\6\15\6\0\4\15\3\0"+
    "\6\15\1\333\15\15\1\16\16\15\3\0\6\15\6\0"+
    "\4\15\3\0\14\15\1\334\7\15\1\16\16\15\3\0"+
    "\6\15\6\0\4\15\3\0\16\15\1\335\5\15\1\16"+
    "\16\15\3\0\6\15\6\0\4\15\3\0\5\15\1\336"+
    "\16\15\1\16\16\15\3\0\6\15\6\0\4\15\3\0"+
    "\22\15\1\337\1\15\1\16\16\15\3\0\6\15\6\0"+
    "\4\15\3\0\5\15\1\340\16\15\1\16\16\15\3\0"+
    "\3\15\37\0\1\341\65\0\1\342\34\0\3\15\6\0"+
    "\4\15\3\0\4\15\1\343\17\15\1\16\16\15\3\0"+
    "\6\15\6\0\4\15\3\0\14\15\1\344\7\15\1\16"+
    "\16\15\3\0\6\15\6\0\4\15\3\0\15\15\1\176"+
    "\6\15\1\16\16\15\3\0\6\15\6\0\4\15\3\0"+
    "\11\15\1\345\12\15\1\16\16\15\3\0\6\15\6\0"+
    "\4\15\3\0\16\15\1\346\5\15\1\16\16\15\3\0"+
    "\6\15\6\0\4\15\3\0\4\15\1\312\17\15\1\16"+
    "\16\15\3\0\6\15\6\0\4\15\3\0\4\15\1\347"+
    "\17\15\1\16\16\15\3\0\3\15\25\0\1\350\64\0"+
    "\1\351\47\0\3\15\6\0\4\15\3\0\22\15\1\242"+
    "\1\15\1\16\16\15\3\0\6\15\6\0\4\15\3\0"+
    "\15\15\1\352\6\15\1\16\16\15\3\0\6\15\6\0"+
    "\4\15\3\0\7\15\1\353\14\15\1\16\16\15\3\0"+
    "\6\15\2\0\1\354\3\0\4\15\3\0\1\307\23\15"+
    "\1\16\16\15\3\0\3\15\36\0\1\355\71\0\1\356"+
    "\31\0\3\15\6\0\4\15\3\0\16\15\1\357\5\15"+
    "\1\16\16\15\3\0\6\15\6\0\4\15\3\0\14\15"+
    "\1\360\7\15\1\16\16\15\3\0\3\15\2\0\1\361"+
    "\73\0\1\362\105\0\1\363\46\0\3\15\6\0\4\15"+
    "\3\0\21\15\1\364\2\15\1\16\16\15\3\0\6\15"+
    "\6\0\4\15\3\0\5\15\1\365\16\15\1\16\16\15"+
    "\3\0\3\15\2\0\1\366\123\0\1\367\33\0\3\15"+
    "\6\0\4\15\3\0\14\15\1\370\7\15\1\16\16\15"+
    "\3\0\6\15\6\0\4\15\3\0\14\15\1\371\7\15"+
    "\1\16\16\15\3\0\3\15\40\0\1\372\30\0\3\15"+
    "\6\0\4\15\3\0\5\15\1\373\16\15\1\16\16\15"+
    "\3\0\3\15\21\0\1\374\47\0\3\15\6\0\4\15"+
    "\3\0\4\15\1\242\17\15\1\16\16\15\3\0\3\15"+
    "\24\0\1\375\44\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13224];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\4\1\1\11\6\1\2\0\3\1\3\0\4\1"+
    "\11\0\4\1\1\0\5\1\11\0\5\1\13\0\3\1"+
    "\12\0\1\1\27\0\1\11\4\0\1\11\1\0\1\1"+
    "\45\0\1\1\10\0\1\1\1\0\1\1\7\0\1\1"+
    "\10\0\1\1\1\0\1\1\1\0\1\1\3\0\1\1"+
    "\4\0\1\1\2\0\1\1\4\0\1\1\4\0\1\1"+
    "\1\0\2\1\24\0\1\1\7\0\1\1\3\0\1\1"+
    "\4\0\1\1\2\0\1\1\3\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2886) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return ERROR;
            } 
            // fall through
          case 24: break;
          case 2: 
            { lexeme=yytext(); return texto;
            } 
            // fall through
          case 25: break;
          case 3: 
            { lexeme=yytext(); return numero;
            } 
            // fall through
          case 26: break;
          case 4: 
            { /*Ignore*/
            } 
            // fall through
          case 27: break;
          case 5: 
            { lexeme=yytext(); return operacion;
            } 
            // fall through
          case 28: break;
          case 6: 
            { lexeme=yytext(); return url_local;
            } 
            // fall through
          case 29: break;
          case 7: 
            { lexeme=yytext(); return correo;
            } 
            // fall through
          case 30: break;
          case 8: 
            { lexeme=yytext(); return tipo_documento;
            } 
            // fall through
          case 31: break;
          case 9: 
            { lexeme=yytext(); return imagen;
            } 
            // fall through
          case 32: break;
          case 10: 
            { lexeme=yytext(); return elementos_raiz;
            } 
            // fall through
          case 33: break;
          case 11: 
            { lexeme=yytext(); return atributos_tabla;
            } 
            // fall through
          case 34: break;
          case 12: 
            { lexeme=yytext(); return informacion_tabulada;
            } 
            // fall through
          case 35: break;
          case 13: 
            { lexeme=yytext(); return salto_linea;
            } 
            // fall through
          case 36: break;
          case 14: 
            { lexeme=yytext(); return metadatos_titulo;
            } 
            // fall through
          case 37: break;
          case 15: 
            { lexeme=yytext(); return secciones_cuerpo;
            } 
            // fall through
          case 38: break;
          case 16: 
            { lexeme=yytext(); return direccion;
            } 
            // fall through
          case 39: break;
          case 17: 
            { lexeme=yytext(); return  agrupacion_contenido;
            } 
            // fall through
          case 40: break;
          case 18: 
            { lexeme=yytext(); return negrita;
            } 
            // fall through
          case 41: break;
          case 19: 
            { lexeme=yytext(); return vinculo;
            } 
            // fall through
          case 42: break;
          case 20: 
            { lexeme=yytext(); return metadatos_cabecera;
            } 
            // fall through
          case 43: break;
          case 21: 
            { lexeme=yytext(); return listas_item;
            } 
            // fall through
          case 44: break;
          case 22: 
            { lexeme=yytext(); return secciones_encabezado;
            } 
            // fall through
          case 45: break;
          case 23: 
            { lexeme=yytext(); return listas;
            } 
            // fall through
          case 46: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
